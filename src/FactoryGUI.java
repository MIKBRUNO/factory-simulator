import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;
import java.util.function.Consumer;

public class FactoryGUI {
    private JPanel MainPanel;
    private JLabel CARS_IN_STORAGE;
    private JLabel CARS_TO_MAKE;
    private JLabel CARS_SALED;
    private JSlider DEALERS;
    private JSlider ACCESSORIES;
    private JSlider ENGINES;
    private JSlider BODIES;
    public JLabel ENGINES_ALLTIME;
    public JLabel ACCESSORIES_ALL_TIME;
    public JLabel BODIES_ALL_TIME;
    public JLabel ENGINES_IN_STORAGE;
    public JLabel BODIES_IN_STORAGE;
    public JLabel ACCESSORIES_IN_STORAGE;
    public JLabel READY_CARS;

    public FactoryGUI(
            Consumer<Integer> dealers, Consumer<Integer> accessories,
            Consumer<Integer> engines, Consumer<Integer> bodies
    ) {
        DEALERS.addChangeListener(e -> dealers.accept(DEALERS.getValue()));
        ACCESSORIES.addChangeListener(e -> accessories.accept(ACCESSORIES.getValue()));
        BODIES.addChangeListener(e -> bodies.accept(BODIES.getValue()));
        ENGINES.addChangeListener(e -> engines.accept(ENGINES.getValue()));
    }

    public JPanel getMainPanel() {
        return MainPanel;
    }

    public JLabel getCARS_IN_STORAGE() {
        return CARS_IN_STORAGE;
    }

    public JLabel getCARS_TO_MAKE() {
        return CARS_TO_MAKE;
    }

    public JLabel getCARS_SALED() {
        return CARS_SALED;
    }

    public JSlider getDEALERS() {
        return DEALERS;
    }

    public JSlider getACCESSORIES() {
        return ACCESSORIES;
    }

    public JSlider getENGINES() {
        return ENGINES;
    }

    public JSlider getBODIES() {
        return BODIES;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        MainPanel.add(panel1, BorderLayout.NORTH);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        panel1.add(panel2, BorderLayout.NORTH);
        panel2.setBorder(BorderFactory.createTitledBorder(null, "Dealers", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel2.add(panel3, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        label1.setText("Cars in storage: ");
        panel3.add(label1);
        CARS_IN_STORAGE = new JLabel();
        Font CARS_IN_STORAGEFont = this.$$$getFont$$$(null, Font.BOLD, 20, CARS_IN_STORAGE.getFont());
        if (CARS_IN_STORAGEFont != null) CARS_IN_STORAGE.setFont(CARS_IN_STORAGEFont);
        CARS_IN_STORAGE.setText("0");
        panel3.add(CARS_IN_STORAGE);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel2.add(panel4, BorderLayout.SOUTH);
        final JLabel label2 = new JLabel();
        label2.setText("Saled cars: ");
        panel4.add(label2);
        CARS_SALED = new JLabel();
        Font CARS_SALEDFont = this.$$$getFont$$$(null, Font.BOLD, 20, CARS_SALED.getFont());
        if (CARS_SALEDFont != null) CARS_SALED.setFont(CARS_SALEDFont);
        CARS_SALED.setText("0");
        panel4.add(CARS_SALED);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new BorderLayout(0, 0));
        panel1.add(panel5, BorderLayout.SOUTH);
        panel5.setBorder(BorderFactory.createTitledBorder(null, "Workers", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel5.add(panel6, BorderLayout.NORTH);
        final JLabel label3 = new JLabel();
        label3.setText("Cars to make: ");
        panel6.add(label3);
        CARS_TO_MAKE = new JLabel();
        Font CARS_TO_MAKEFont = this.$$$getFont$$$(null, Font.BOLD, 20, CARS_TO_MAKE.getFont());
        if (CARS_TO_MAKEFont != null) CARS_TO_MAKE.setFont(CARS_TO_MAKEFont);
        CARS_TO_MAKE.setText("0");
        panel6.add(CARS_TO_MAKE);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel5.add(panel7, BorderLayout.SOUTH);
        final JLabel label4 = new JLabel();
        label4.setText("Ready cars: ");
        panel7.add(label4);
        READY_CARS = new JLabel();
        Font READY_CARSFont = this.$$$getFont$$$(null, Font.BOLD, 20, READY_CARS.getFont());
        if (READY_CARSFont != null) READY_CARS.setFont(READY_CARSFont);
        READY_CARS.setText("0");
        panel7.add(READY_CARS);
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new BorderLayout(0, 0));
        panel1.add(panel8, BorderLayout.CENTER);
        panel8.setBorder(BorderFactory.createTitledBorder(null, "Producers", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new BorderLayout(0, 0));
        panel8.add(panel9, BorderLayout.NORTH);
        final JPanel panel10 = new JPanel();
        panel10.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel9.add(panel10, BorderLayout.NORTH);
        final JLabel label5 = new JLabel();
        label5.setText("All-time produced Engines:");
        panel10.add(label5);
        ENGINES_ALLTIME = new JLabel();
        Font ENGINES_ALLTIMEFont = this.$$$getFont$$$(null, Font.BOLD, 20, ENGINES_ALLTIME.getFont());
        if (ENGINES_ALLTIMEFont != null) ENGINES_ALLTIME.setFont(ENGINES_ALLTIMEFont);
        ENGINES_ALLTIME.setText("0");
        panel10.add(ENGINES_ALLTIME);
        final JPanel panel11 = new JPanel();
        panel11.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel9.add(panel11, BorderLayout.SOUTH);
        final JLabel label6 = new JLabel();
        label6.setText("Engines in storage: ");
        panel11.add(label6);
        ENGINES_IN_STORAGE = new JLabel();
        Font ENGINES_IN_STORAGEFont = this.$$$getFont$$$(null, Font.BOLD, 20, ENGINES_IN_STORAGE.getFont());
        if (ENGINES_IN_STORAGEFont != null) ENGINES_IN_STORAGE.setFont(ENGINES_IN_STORAGEFont);
        ENGINES_IN_STORAGE.setText("0");
        panel11.add(ENGINES_IN_STORAGE);
        final JPanel panel12 = new JPanel();
        panel12.setLayout(new BorderLayout(0, 0));
        panel8.add(panel12, BorderLayout.SOUTH);
        final JPanel panel13 = new JPanel();
        panel13.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel12.add(panel13, BorderLayout.NORTH);
        final JLabel label7 = new JLabel();
        label7.setText("All-time produced Bodies:");
        panel13.add(label7);
        BODIES_ALL_TIME = new JLabel();
        Font BODIES_ALL_TIMEFont = this.$$$getFont$$$(null, Font.BOLD, 20, BODIES_ALL_TIME.getFont());
        if (BODIES_ALL_TIMEFont != null) BODIES_ALL_TIME.setFont(BODIES_ALL_TIMEFont);
        BODIES_ALL_TIME.setText("0");
        panel13.add(BODIES_ALL_TIME);
        final JPanel panel14 = new JPanel();
        panel14.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel12.add(panel14, BorderLayout.SOUTH);
        final JLabel label8 = new JLabel();
        label8.setText("Bodies in storage: ");
        panel14.add(label8);
        BODIES_IN_STORAGE = new JLabel();
        Font BODIES_IN_STORAGEFont = this.$$$getFont$$$(null, Font.BOLD, 20, BODIES_IN_STORAGE.getFont());
        if (BODIES_IN_STORAGEFont != null) BODIES_IN_STORAGE.setFont(BODIES_IN_STORAGEFont);
        BODIES_IN_STORAGE.setText("0");
        panel14.add(BODIES_IN_STORAGE);
        final JPanel panel15 = new JPanel();
        panel15.setLayout(new BorderLayout(0, 0));
        panel8.add(panel15, BorderLayout.CENTER);
        final JPanel panel16 = new JPanel();
        panel16.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel15.add(panel16, BorderLayout.NORTH);
        final JLabel label9 = new JLabel();
        label9.setText("All-time produced Accessories: ");
        panel16.add(label9);
        ACCESSORIES_ALL_TIME = new JLabel();
        Font ACCESSORIES_ALL_TIMEFont = this.$$$getFont$$$(null, Font.BOLD, 20, ACCESSORIES_ALL_TIME.getFont());
        if (ACCESSORIES_ALL_TIMEFont != null) ACCESSORIES_ALL_TIME.setFont(ACCESSORIES_ALL_TIMEFont);
        ACCESSORIES_ALL_TIME.setText("0");
        panel16.add(ACCESSORIES_ALL_TIME);
        final JPanel panel17 = new JPanel();
        panel17.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel15.add(panel17, BorderLayout.SOUTH);
        final JLabel label10 = new JLabel();
        label10.setText("Accessories in storage: ");
        panel17.add(label10);
        ACCESSORIES_IN_STORAGE = new JLabel();
        Font ACCESSORIES_IN_STORAGEFont = this.$$$getFont$$$(null, Font.BOLD, 20, ACCESSORIES_IN_STORAGE.getFont());
        if (ACCESSORIES_IN_STORAGEFont != null) ACCESSORIES_IN_STORAGE.setFont(ACCESSORIES_IN_STORAGEFont);
        ACCESSORIES_IN_STORAGE.setText("0");
        panel17.add(ACCESSORIES_IN_STORAGE);
        final JPanel panel18 = new JPanel();
        panel18.setLayout(new BorderLayout(0, 0));
        MainPanel.add(panel18, BorderLayout.SOUTH);
        panel18.setBorder(BorderFactory.createTitledBorder(null, "Speed", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel19 = new JPanel();
        panel19.setLayout(new BorderLayout(0, 0));
        panel18.add(panel19, BorderLayout.NORTH);
        panel19.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        DEALERS = new JSlider();
        DEALERS.setValue(100);
        panel19.add(DEALERS, BorderLayout.EAST);
        final JLabel label11 = new JLabel();
        label11.setText("Dealers:");
        panel19.add(label11, BorderLayout.WEST);
        final JPanel panel20 = new JPanel();
        panel20.setLayout(new BorderLayout(0, 0));
        panel18.add(panel20, BorderLayout.SOUTH);
        panel20.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel21 = new JPanel();
        panel21.setLayout(new BorderLayout(0, 0));
        panel20.add(panel21, BorderLayout.NORTH);
        ACCESSORIES = new JSlider();
        ACCESSORIES.setValue(100);
        panel21.add(ACCESSORIES, BorderLayout.EAST);
        final JLabel label12 = new JLabel();
        label12.setText("Accessory suppliers: ");
        panel21.add(label12, BorderLayout.CENTER);
        final JPanel panel22 = new JPanel();
        panel22.setLayout(new BorderLayout(0, 0));
        panel20.add(panel22, BorderLayout.SOUTH);
        ENGINES = new JSlider();
        ENGINES.setValue(100);
        panel22.add(ENGINES, BorderLayout.EAST);
        final JLabel label13 = new JLabel();
        label13.setText("Engine suppliers: ");
        panel22.add(label13, BorderLayout.CENTER);
        final JPanel panel23 = new JPanel();
        panel23.setLayout(new BorderLayout(0, 0));
        panel20.add(panel23, BorderLayout.CENTER);
        BODIES = new JSlider();
        BODIES.setValue(100);
        panel23.add(BODIES, BorderLayout.EAST);
        final JLabel label14 = new JLabel();
        label14.setText("Body suppliers: ");
        panel23.add(label14, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

}
